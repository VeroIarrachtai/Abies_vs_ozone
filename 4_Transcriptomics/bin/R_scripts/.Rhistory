############################################
tratamiento <- c("TS","TS","TS",
"TC","TC","TC")
############################################
# Add characteristics
############################################
tratamiento <- c("TS","TS","TS",
"TC","TC","TC")
label <- c("TS_1", "TS_2", "TS_5",
"TC_1", "TC_2", "TC_4")
samples <-c("TS1", "TS2", "TS5",
"TC1", "TC2", "TC4")
targets <- data.frame(tratamiento,label,samples)
rownames(targets) <- label
targets
### Filtering genes
table(rowSums(DSvsHS)==0)
targets
### Filtering genes
table(rowSums(TSvsTC)==0)
suma <- rowSums(TSvsTC)
filtconteos <- TSvsTC[suma != 0,]
dim(filtconteos)
head(filtconteos)
############################################
# Add characteristics
############################################
tratamiento <- c("TS","TS","TS",
"TC","TC","TC")
label <- c("TS_1", "TS_2", "TS_5",
"TC_1", "TC_2", "TC_4")
samples <-c("TS1", "TS2", "TS5",
"TC1", "TC2", "TC4")
targets <- data.frame(tratamiento,label,samples)
rownames(targets) <- label
targets
### Filtering genes
table(rowSums(TSvsTC)==0)
suma <- rowSums(TSvsTC)
########################################### Damaged vs Tolerant 170 ppb###########################################
##################################################################################################################
##################################################################################################################
# Select subset data(descart data)
TSvsTC<- subset(alldata, select = c(TS_1, TS_2, TS_5,
TC_1, TC_2, TC_4))
View(alldata)
# Load data. Count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata <- as.data.frame(alldata)
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
########################################### Damaged vs Tolerant 170 ppb###########################################
##################################################################################################################
##################################################################################################################
# Select subset data(descart data)
HSvsHC<- subset(alldata, select = c(HS_1, HS_2, HS_5,
HC_1, HC_2, HC_4))
############################################
# Add characteristics
############################################
tratamiento <- c("HS","HS","HS",
"HC","HC","HC")
label <- c("HS_1", "HS_2", "HS_5",
"HC_1", "HC_2", "HC_4")
samples <-c("HS1", "HS2", "HS5",
"HC1", "HC2", "HC4")
targets <- data.frame(tratamiento,label,samples)
rownames(targets) <- label
targets
### Filtering genes
table(rowSums(TSvsTC)==0)
suma <- rowSums(TSvsTC)
filtconteos <- TSvsTC[suma != 0,]
targets
### Filtering genes
table(rowSums(HSvsHC)==0)
suma <- rowSums(HSvsHC)
filtconteos <- HSvsHC[suma != 0,]
dim(filtconteos)
head(filtconteos)
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:6], group = targets$tratamiento) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS HSvsHC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV HSvsHC")
## Test
et <- exactTest(d,pair=c("HS","HC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR HSvsHC")
abline(v=0.05, col="red",lwd=3)
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~tratamiento)
### Test
dds <- DESeq(dds)
head(dds)
res <- results(dds)
head (res)
#edgeR
d$samples$norm.factors #edgeR
#DESeq2
sizeFactors(dds) #DESeq2
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
############################################################################################################
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
############################################################################################################
########
# edgeR
########
head (topTags(et, n= Inf))
########
# DESeq2
########
res[rownames(topTags(et, n= Inf)),]
################################
#Plot Log fold change
################################
########
# edgeR
########p.value=0.1
de <- decideTestsDGE(et, adjust.method = "fdr" )
head(de)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
########
# DESeq2
plotMA(res, main="MA-plot DESeq2", ylim=c(-5,5))
##################################################################
### Sort the genes according to the attached p-value they have obtained
##################################################################
########
# edgeR
########
topSig <- top[top$table$FDR < 0.05, ]
dim(topSig)
head(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_DSvsHS_FDR_0.05.txt", sep="\t", row.names=T)
write.table(topSig_export, "../../metadata/DGE/EdgeR_HSvsHC_FDR_0.05.txt", sep="\t", row.names=T)
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_HSvsHC_FDR_0.05.txt", sep="\t", row.names=T)
########
# DESeq2
########
# Sort by p-valores
resOrdered <- res[order(res$padj),]
# Only DEG
xx <-res[order(res$padj,na.last=NA),]
head(xx)
resSig2 <- xx[xx$padj < 0.05, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HSvsHC_FDR_0.05.txt", sep="\t", row.names=T)
topSig <- top[top$table$FDR < 5, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_HSvsHC_FDR_5.txt", sep="\t", row.names=T)
########
# DESeq2
########
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 5, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HSvsHC_FDR_5.txt", sep="\t", row.names=T)
genesDEcomunes <- intersect(genesDEedgeR,genesDEDESeq2)
head(genesDEcomunes)
str(genesDEcomunes)
# Load data. Count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata <- as.data.frame(alldata)
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
########################################### Damaged vs Tolerant 170 ppb###########################################
##################################################################################################################
##################################################################################################################
# Select subset data(descart data)
HSvsHC<- subset(alldata, select = c(HS_1, HS_2, HS_5,
HC_1, HC_2, HC_4))
# Load data. Count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata <- as.data.frame(alldata)
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
########################################### Damaged vs Tolerant 170 ppb###########################################
##################################################################################################################
##################################################################################################################
# Select subset data(descart data)
DSvsDC<- subset(alldata, select = c(DS_1, DS_2, DS_4,
DC_1, DC_4, DC_5))
############################################
# Add characteristics
############################################
tratamiento <- c("DS","DS","DS",
"DC","DC","DC")
label <- c("DS_1", "DS_2", "DS_4",
"DC_1", "DC_4", "DC_5")
samples <-c("DS1", "DS2", "DS4",
"DC1", "DC4", "DC5")
targets <- data.frame(tratamiento,label,samples)
rownames(targets) <- label
targets
samples <-c("DS1", "DS2", "DS4",
"DC1", "DC4", "DC5")
targets <- data.frame(tratamiento,label,samples)
rownames(targets) <- label
targets
### Filtering genes
table(rowSums(DSvsDC)==0)
suma <- rowSums(DSvsDC)
filtconteos <- DSvsDC[suma != 0,]
dim(filtconteos)
head(filtconteos)
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:6], group = targets$tratamiento) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS DSvsDC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV DSvsDC")
## Test
et <- exactTest(d,pair=c("DS","DC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR DSvsDC")
abline(v=0.05, col="red",lwd=3)
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~tratamiento)
### Test
dds <- DESeq(dds)
head(dds)
res <- results(dds)
head (res)
#edgeR
d$samples$norm.factors #edgeR
#DESeq2
sizeFactors(dds) #DESeq2
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
############################################################################################################
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
############################################################################################################
########
# edgeR
########
head (topTags(et, n= Inf))
########
# DESeq2
########
res[rownames(topTags(et, n= Inf)),]
################################
#Plot Log fold change
################################
########
# edgeR
########p.value=0.1
de <- decideTestsDGE(et, adjust.method = "fdr" )
head(de)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
########
# DESeq2
plotMA(res, main="MA-plot DESeq2", ylim=c(-5,5))
##################################################################
### Sort the genes according to the attached p-value they have obtained
##################################################################
########
# edgeR
########
topSig <- top[top$table$FDR < 0.05, ]
dim(topSig)
head(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_DSvsDC_FDR_0.05.txt", sep="\t", row.names=T)
########
# DESeq2
########
# Sort by p-valores
resOrdered <- res[order(res$padj),]
# Only DEG
xx <-res[order(res$padj,na.last=NA),]
head(xx)
resSig2 <- xx[xx$padj < 0.05, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_DSvsDC_FDR_0.05.txt", sep="\t", row.names=T)
topSig <- top[top$table$FDR < 5, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_DSvsDC_FDR_5.txt", sep="\t", row.names=T)
########
# DESeq2
########
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 5, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_DSvsDC_FDR_5.txt", sep="\t", row.names=T)
genesDEcomunes <- intersect(genesDEedgeR,genesDEDESeq2)
head(genesDEcomunes)
str(genesDEcomunes)
#Load data DESeq2 and EdgeR
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HSvsHC_FDR_5.txt") ## TENGO ESTO 2 VECES EN LA MISMA TABLA
#Load data DESeq2 and EdgeR
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HSvsHC_FDR_5.txt") ## TENGO ESTO 2 VECES EN LA MISMA TABLA
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HSvsHC_FDR_5.txt")
results_Edge$logFC <- -(results_Edge$logFC)
# Remake tables with info that I want
results_DESeq2_rt <- data.frame(results_DESeq2[,c(2,5,6)])
results_Edge_rt <- data.frame(results_Edge[,c(1,3,4)])
View(results_DESeq2_rt)
results_DESeq2_rt$sig <- -log10(results_DESeq2$pvalue) ##Create a column with aditional info of FDR (padj)##
results_DESeq2_rt$sigadj <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
results_Edge_rt$sig <- -log10(results_Edge$PValue) ##Create a column with aditional info of FDR (padj)##
results_Edge_rt$sigadj <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
##Create a column with colors depending p-adj##
results_DESeq2_rt$TDE <- (results_DESeq2_rt$padj< 0.05) & (abs(results_DESeq2_rt$log2FoldChange) > 1)
results_Edge_rt$TDE <- (results_Edge_rt$FDR< 0.05) & (abs(results_Edge_rt$logFC) > 1)
# Plot Volcano plot
ggplot(results_DESeq2_rt, aes(x=log2FoldChange, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_DESeq2_rt$padj< 0.05) & (abs(results_DESeq2_rt$log2FoldChange) > 1),
as.character(row.names(results_DESeq2_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#d44792"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
ggsave("../../outputs/8.1_VP_DE2_S_t_vsD.png")
ggplot(results_Edge_rt, aes(x=logFC, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_Edge_rt$FDR< 0.05) & (abs(results_Edge_rt$logFC) > 1),
as.character(row.names(results_Edge_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#ddaee8"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
# Plot Volcano plot
ggplot(results_DESeq2_rt, aes(x=log2FoldChange, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_DESeq2_rt$padj< 0.05) & (abs(results_DESeq2_rt$log2FoldChange) > 1),
as.character(row.names(results_DESeq2_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#d44792"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
ggsave("../../outputs/8.1_VP_DE2_HSvsHC.png")
ggplot(results_Edge_rt, aes(x=logFC, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_Edge_rt$FDR< 0.05) & (abs(results_Edge_rt$logFC) > 1),
as.character(row.names(results_Edge_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#ddaee8"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
ggsave("../../outputs/8.1_VP_ER_HSvsHC.png")
# Make table with over and down expressed
overxpress_Ds2 <- results_DESeq2_rt[results_DESeq2_rt[,"padj"]< 0.05 & results_DESeq2_rt[,"log2FoldChange"]> 1, ]
downxpress_Ds2 <- results_DESeq2_rt[results_DESeq2_rt[,"padj"]< 0.05 & results_DESeq2_rt[,"log2FoldChange"]< -1, ]
overxpress_Ed <- results_Edge_rt[results_Edge_rt[,"FDR"]< 0.05 & results_Edge_rt[,"logFC"]> 1, ]
downxpress_Ed <- results_Edge_rt[results_Edge_rt[,"FDR"]< 0.05 & results_Edge_rt[,"logFC"]< -1, ]
genesDEcomun_over <- intersect(rownames(overxpress_Ds2),rownames(overxpress_Ed))
genesDEcomun_down <- intersect(rownames(downxpress_Ds2),rownames(downxpress_Ed))
comun_genes_od <- c(genesDEcomun_over,genesDEcomun_down)
# Export data
write.table(overxpress_Ds2, "../../metadata/DGE/oxs_DE2_HSvsHC.txt", sep="\t", row.names=T)
write.table(downxpress_Ds2, "../../metadata/DGE/sxs_DE2_HSvsHC.txt", sep="\t", row.names=T)
write.table(overxpress_Ed , "../../metadata/DGE/oxs_ER_HSvsHC.txt", sep="\t", row.names=T)
write.table(downxpress_Ed , "../../metadata/DGE/sxs_ER_HSvsHC.txt", sep="\t", row.names=T)
comun_genes_od
#Load data DESeq2 and EdgeR
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_DSvsDC_FDR_5.txt") ## TENGO ESTO 2 VECES EN LA MISMA TABLA
results_Edge<- read.delim("../../metadata/DGE/EdgeR_DSvsDC_FDR_5.txt")
results_Edge$logFC <- -(results_Edge$logFC)
# Remake tables with info that I want
results_DESeq2_rt <- data.frame(results_DESeq2[,c(2,5,6)])
results_Edge_rt <- data.frame(results_Edge[,c(1,3,4)])
results_DESeq2_rt$sig <- -log10(results_DESeq2$pvalue) ##Create a column with aditional info of FDR (padj)##
results_DESeq2_rt$sigadj <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
results_Edge_rt$sig <- -log10(results_Edge$PValue) ##Create a column with aditional info of FDR (padj)##
results_Edge_rt$sigadj <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
results_Edge_rt$sigadj <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
##Create a column with colors depending p-adj##
results_DESeq2_rt$TDE <- (results_DESeq2_rt$padj< 0.05) & (abs(results_DESeq2_rt$log2FoldChange) > 1)
results_Edge_rt$TDE <- (results_Edge_rt$FDR< 0.05) & (abs(results_Edge_rt$logFC) > 1)
# Plot Volcano plot
ggplot(results_DESeq2_rt, aes(x=log2FoldChange, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_DESeq2_rt$padj< 0.05) & (abs(results_DESeq2_rt$log2FoldChange) > 1),
as.character(row.names(results_DESeq2_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#d44792"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
ggsave("../../outputs/8.1_VP_DE2_DSvsDC.png")
ggplot(results_Edge_rt, aes(x=logFC, y=sig)) +
geom_point(aes(colour = TDE ),size =3.5)+
geom_text(aes(label=ifelse((results_Edge_rt$FDR< 0.05) & (abs(results_Edge_rt$logFC) > 1),
as.character(row.names(results_Edge_rt)),'')),hjust=0.5,vjust=0.5, size= 2, angle=35)+
scale_color_manual(values=c("grey", "#ddaee8"))+
xlab("log2 fold change")+
ylab("-log10 (P value)")+
theme_light(base_size = 10)+
theme(legend.position = "none")+
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed", size = 0.25) + # Horizontal significance cut-off line.
geom_vline(xintercept = 1, colour = "black", linetype = "dashed", size = 0.25)+  # Vertical significance cut-off line (+).
geom_vline(xintercept = -1, colour = "black", linetype = "dashed", size = 0.25)  # Vertical significance cut-off line (+).
ggsave("../../outputs/8.1_VP_ER_DSvsDC.png")
# Make table with over and down expressed
overxpress_Ds2 <- results_DESeq2_rt[results_DESeq2_rt[,"padj"]< 0.05 & results_DESeq2_rt[,"log2FoldChange"]> 1, ]
downxpress_Ds2 <- results_DESeq2_rt[results_DESeq2_rt[,"padj"]< 0.05 & results_DESeq2_rt[,"log2FoldChange"]< -1, ]
overxpress_Ed <- results_Edge_rt[results_Edge_rt[,"FDR"]< 0.05 & results_Edge_rt[,"logFC"]> 1, ]
downxpress_Ed <- results_Edge_rt[results_Edge_rt[,"FDR"]< 0.05 & results_Edge_rt[,"logFC"]< -1, ]
genesDEcomun_over <- intersect(rownames(overxpress_Ds2),rownames(overxpress_Ed))
genesDEcomun_down <- intersect(rownames(downxpress_Ds2),rownames(downxpress_Ed))
comun_genes_od <- c(genesDEcomun_over,genesDEcomun_down)
# Export data
write.table(overxpress_Ds2, "../../metadata/DGE/oxs_DE2_DSvsDC.txt", sep="\t", row.names=T)
write.table(downxpress_Ds2, "../../metadata/DGE/sxs_DE2_DSvsDC.txt", sep="\t", row.names=T)
write.table(overxpress_Ed , "../../metadata/DGE/oxs_ER_DSvsDC.txt", sep="\t", row.names=T)
write.table(downxpress_Ed , "../../metadata/DGE/sxs_ER_DSvsDC.txt", sep="\t", row.names=T)
comun_genes_od
