obj@pop
indNames(obj)
obj <- read.snp("path-to-my-file.snp")
obj <- read.snp("path-to-my-file.snp")
myPath <- system.file("files/usflu.fasta",package="adegenet")flu <- fasta2genlight(myPath, chunk=10, parallel=FALSE)
myPath <- system.file("files/usflu.fasta",package="adegenet")
flu <- fasta2genlight(myPath, chunk=10, parallel=FALSE)
flu
head(position(flu), 20)
head(alleles(flu), 20)
head(locNames(flu), 20)
temp <- density(position(flu), bw=10)plot(temp, type="n", xlab="Position in the alignment",     main="Location of the SNPs", xlim=c(0,1701))polygon(c(temp$x,rev(temp$x)), c(temp$y, rep(0,length(temp$x))),        col=transp("blue",.3))points(position(flu), rep(0, nLoc(flu)), pch="|", col="blue")
temp <- density(position(flu), bw=10) plot(temp, type="n", xlab="Position in the alignment", main="Location of the SNPs", xlim=c(0,1701)) polygon(c(temp$x,rev(temp$x)), c(temp$y, rep(0,length(temp$x))), col=transp("blue",.3)) points(position(flu), rep(0, nLoc(flu)), pch="|", col="blue")
temp <- density(position(flu), bw=10) plot(temp, type="n", xlab="Position in the alignment", main="Location of the SNPs", xlim=c(0,1701)), polygon(c(temp$x,rev(temp$x)), c(temp$y, rep(0,length(temp$x))), col=transp("blue",.3)), points(position(flu), rep(0, nLoc(flu)), pch="|", col="blue")
temp <- density(position(flu), bw=10) plot(temp, type="n", xlab="Position in the alignment", main="Location of the SNPs", xlim=c(0,1701)), polygon(c(temp$x,rev(temp$x)), c(temp$y, rep(0,length(temp$x))), col=transp("blue",.3)), points(position(flu), rep(0, nLoc(flu)), pch="|", col="blue")
snpposi.plot(position(flu), genome.size=1700, codon=FALSE)
snpposi.plot(position(flu), genome.size=1700)
snpposi.test(position(flu), genome.size=1700)
flu <- fasta2genlight(myPath, chunk=10,saveNbAlleles=TRUE, quiet=TRUE,                      parallel=FALSE)
flu <- fasta2genlight(myPath, chunk=10,saveNbAlleles=TRUE, quiet=TRUE, parallel=FALSE)
flu
head(other(flu)$nb.all.per.loc, 20)
100*mean(unlist(other(flu))>1)
temp <- table(unlist(other(flu)))barplot(temp, main="Distribution of the number \nof alleles per loci", xlab="Number of alleles", ylab="Number of sites", col=heat.colors(4))
temp <- table(unlist(other(flu)))barplot(temp, main="Distribution of the number \nof alleles per loci"
temp <- temp[-1]
args(glSim)
glPlot(flu, posi="topleft")
x <- glSim(100, 1000, k=5, block.maxsize = 200, ploidy=2, sort.pop=TRUE) glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE) glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE), glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE) glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE), glPlot(x, col=bluepal(3))
x<- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE), glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE), glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE) glPlot(x, col=bluepal(3))
x <- glSim(100, 1000, k=5, block.maxsize=200, ploidy=2, sort.pop=TRUE) glPlot(x, col=bluepal(3))
myFreq <- glMean(flu)
myFreq <- glMean(flu)hist(myFreq, proba=TRUE, col="gold", xlab="Allele frequencies",     main="Distribution of (second) allele frequencies")
myFreq <- glMean(flu)hist(myFreq, proba=TRUE, col="gold", xlab="Allele frequencies", main="Distribution of (second) allele frequencies")
myFreq <- glMean(flu) hist(myFreq, proba=TRUE, col="gold", xlab="Allele frequencies", main="Distribution of (second) allele frequencies")
myFreq <- glMean(flu)
myFreq <- c(myFreq, 1-myFreq)hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies",     main="Distribution of allele frequencies", nclass=20)
myFreq <- c(myFreq, 1-myFreq) hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies", main="Distribution of allele frequencies", nclass=20)
myFreq <- c(myFreq, 1-myFreq) hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies", main="Distribution of allele frequencies", nclass=20)
myFreq <- c(myFreq, 1-myFreq)hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies", main="Distribution of allele frequencies", nclass=20)
myFreq <- c(myFreq, 1-myFreq)hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies", main="Distribution of allele frequencies", nclass=20)
myFreq <- c(myFreq, 1-myFreq)hist(myFreq, proba=TRUE, col="darkseagreen3", xlab="Allele frequencies",main="Distribution of allele frequencies", nclass=20)
head(glNA(flu),20)
temp <- density(glNA(flu), bw=10)plot(temp, type="n", xlab="Position in the alignment", main="Location of the     xlim=c(0,1701))polygon(c(temp$x,rev(temp$x)), c(temp$y, rep(0,length(temp$x))), col=transp("     points(glNA(flu), rep(0, nLoc(flu)), pch="|", col="blue")
x <- glSim(40, 1e4, LD=FALSE, parallel=FALSE)
x
x <- seploc(x, n.block=10, parallel=FALSE)
class(x)
names(x)
x[1:2]
lD <- lapply(x, function(e) dist(as.matrix(e)))class(lD)
x <- new("genlight", list(a=c(0,0,1,1), b=c(1,1,0,0), c=c(1,1,1,1)),         parallel=FALSE)
x <- new("genlight", list(a=c(0,0,1,1), b=c(1,1,0,0), c=c(1,1,1,1)), parallel=FALSE)
locNames(x) <- 1:4
x
as.matrix(x)
glMean(x)
x <- new("genlight", list(a=c(0,0,2,2), b=c(1,1,0,0), c=c(1,1,1,1)), parallel=FALSE)locNames(x) <- 1:4
x <- new("genlight", list(a=c(0,0,2,2), b=c(1,1,0,0), c=c(1,1,1,1)), parallel=FALSE) locNames(x) <- 1:4
x <- new("genlight", list(a=c(0,0,2,2), b=c(1,1,0,0), c=c(1,1,1,1)), parallel=FALSE), locNames(x) <- 1:4
M <- as.matrix(x)/ ploidy(x) apply(M,2,mean)
pca1 <- glPca(flu)
pca1
pca1
pca1 <- glPca(flu)
pca1
scatter(pca, posi="bottomright") title("PCA of US influenza data/n axes 1-2")
scatter(pca, posi="bottomright")
scatter(pca1, posi="bottomright") title("PCA of US influenza data/n axes 1-2")
scatter(pca1, posi = "bottomright") title("PCA of US influenza data/n axes 1-2")
scatter(pca1, posi="bottomright") title("PCA of US influenza data/n axes 1-2")
library(ape)
tre <- nj(dist(as.matrix(flu)))
tre
plot(tre, typ="fan", cex=0.7)
title("NJ tree of the US influenza data")
myCol <- colorplot(pca1$scores,pca1$scores, transp=TRUE, cex=4)
abline(h=0,v=0, col="grey")
add.scatter.eig(pca1$eig[1:40],2,1,2, posi="topright", inset=.05, ratio=.3)
plot(tre, typ="fan", show.tip=FALSE)
tiplabels(pch=20, col=myCol, cex=4)
title("NJ tree of the US influenza data")
x <- glSim(100, 1e4, 50)
dapc1 <- dapc(x, n.pca=10, n.da=1)
scatter(dapc1,scree.da=FALSE, bg="white", posi.pca="topright", legend=TRUE, txt.leg=paste("group", 1:2), col=c("red","blue"))
compoplot(dapc1, col=c("red","blue"),lab="", txt.leg=paste("group", 1:2), ncol=2)
loadingplot(dapc1$var.contr, thres=1e-3)
loadingplot(tail(dapc1$var.contr[,1],100), thres=1e-3)
q()
?vcf.fn
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsVCF2GD(vcf.fn, "test.gds", method="biallelic.only")
SNPRelate::snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsSummary("test.gds")
SNPRelate::snpgdsSummary("test.gds")
genofile <- SNPRelate::snpgdsOpen("test.gds" )
pop_code <- read.gdsn(index.gdsn(genofile, path="sample.annot/pop.group"))
?read.gdsn
pop_code <-  gdsfmt::read.gdsn(index.gdsn(genofile, path="sample.annot/pop.group"))
pop_code <-  gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, path="sample.annot/pop.group"))
pop_code <-  gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, path="sample.annot/pop.group"))
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.2)
snpset <- SNPRelate::snpgdsLDpruning(genofile, ld.threshold=0.2)
SNPRelate::snpgdsSummary("test.gds")
gdsfmt::get.attr.gdsn(gdsfmt::index.gdsn(genofile, "snp.chromosome"))
(genofile <- SNPRelate::snpgdsOpen("test.gds"))
(genofile <- SNPRelate::snpgdsOpen(SNPRelate::snpgdsExampleFileName("test.gds")))
(genofile <- SNPRelate::snpgdsOpen(SNPRelate::snpgdsExampleFileName("test.gds")))
(genofile <- SNPRelate::snpgdsOpen(SNPRelate::snpgdsExampleFileName()))
q()
SNPRelate::snpgdsSummary(test.gds)
SNPRelate::snpgdsSummary(SNPRelate::snpgdsExampleFileName())
genofile <- SNPRelate::snpgdsOpen(SNPRelate::snpgdsExampleFileName())
gdsfmt::get.attr.gdsn(gdsfmt::index.gdsn(genofile, "snp.chromosome"))
(g <- gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, "genotype"), start=c(1,1), count=c(5,3)))
g <- SNPRelate::snpgdsGetGeno(genofile, sample.id=..., snp.id=...)
g <- SNPRelate::snpgdsGetGeno(genofile, sample.id=1, snp.id=2)
gdsfmt::get.attr.gdsn(gdsfmt::index.gdsn(genofile, "genotype"))
head(gdsn::read.gdsn(gdsn::index.gdsn(genofile, "snp.rs.id")))
head(gdsn::read.gdsn(gdsn::index.gdsn(genofile, "snp.rs.id")))
head(gdsn::read.gdsn(gdsn::index.gdsn(genofile, "snp.rs.id")))
head(gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, "snp.id")))
head(gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, "snp.rs.id")))
pop <- gdsfmt::read.gdsn(gdsfmt::index.gdsn(genofile, path="sample.annot/pop.group"))
table(pop)
SNPRelate::snpgdsClose(genofile)
data(hapmap_geno)
?hapmap_geno
data(hapmap_geno)
SNPRelate::snpgdsCreateGeno("test.gds", genmat = hapmap_geno$genotype,                            sample.id = hapmap_geno$sample.id, snp.id = hapmap_geno$snp.id,                            snp.chromosome = hapmap_geno$snp.chromosome,                            snp.position = hapmap_geno$snp.position,                            snp.allele = hapmap_geno$snp.allele, snpfirstdim=TRUE)
SNPRelate::snpgdsCreateGeno("test.gds", genmat = hapmap_geno$genotype,sample.id = hapmap_geno$sample.id, snp.id = hapmap_geno$snp.id,snp.chromosome = hapmap_geno$snp.chromosome,snp.position = hapmap_geno$snp.position,snp.allele = hapmap_geno$snp.allele, snpfirstdim=TRUE)
SNPRelate::snpgdsCreateGeno("test.gds", genmat = hapmap_geno$genotype, sample.id = hapmap_geno$sample.id, snp.id = hapmap_geno$snp.id, snp.chromosome = hapmap_geno$snp.chromosome, snp.position = hapmap_geno$snp.position, snp.allele = hapmap_geno$snp.allele, snpfirstdim=TRUE)
q()
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
SNPRelate::snpgdsVCF2GDS(vcf.fn, "test.gds", method_"biallelic.only")
SNPRelate::snpgdsVCF2GDS (vcf.fn, "test.gds", method_"biallelic.only")
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
SNPRelate::snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
SNPRelate::snpgdsSummary("test.gds")
newfile <-create.gds("test.gds")
library(gdsfmt)
library (SNPRelate)
newfile <-gdsfmt::create.gds("test.gds")
newfile <-create.gds("test.gds")
newfile <-gdsfmt::createfn.gds("test.gds")
put.attr.gdsn(newfile$root, "FileFormat", "SNP_ARRAY")
add.gdsn(newfile, "sample.id", sample.id)
library (adegenet)
library "adegenet"
library(adegenet)
getClassDef("SNPbin")
getClassDef("SNPbin")
new("SNPbin")
￼x <- new("SNPbin", c(0,1,1,2,0,0
￼x <- new("SNPbin", c(0,1,1,2,0,0))
￼x <- new("SNPbin", c(0,1,1,2,0,0,1))
x <- new("SNPbin, c(0,1.1.2.0.0.1"))
x
x <- new("SNPbin", c(0,1,1,2,0,0,1))
x
x@snp
x@n.loc
x@ploidy
x@label
as.integer(x)
help ( package = ”adegenet” )
help ( package = ”adegenet” )
help (package=”adegenet”)
help(package=”adegenet”)
help(package="adegenet")
library()
help(read.genepop)
help(read.genepop)()
q()
?PLINK
??PLINK
file.show(system.file("/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.snps", package = "adegenet"))
obj <- adegenet::read.snp(system.file("/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.snps", package = "adegenet")), chunk=2, parallel=FALSE)
obj <- adegenet::read.snp(system.file("/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.snps", package = "adegenet"))
obj <- adegenet::read.snp(system.file("/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.snps",ade
obj <- adegenet::read.snp("/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.snps")
getClassDef("genlight")
?genlight
new("genlight")
q()
vcf.fn <- system.file("extdata", "sequence.vdf", package = "SNPRelate")
q()
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
SNPRelate::snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
SNPRelate::snpgdsSummary("test.gds")
library(gdsfmt)
library(SNPRelate
library(SNPRelate)
snpgdsSummary("test.gds")
(genofile <- snpgdsOpen("test.gds"))
gdsfmt::get.attr.gdsn(index.gdsn(genofile, "snp.chromosome"))
(g <- read.gdsn(index.gdsn(genofile, "genotype"), start=c(1,1), count=c(5,3)))
(g <- read.gdsn(index.gdsn(genofile, "genotype"), start=c(1,1), count=c(20,3)))
(g <- read.gdsn(index.gdsn(genofile, "genotype"), start=c(1,1), count=c(20,29)))
(g <- read.gdsn(index.gdsn(genofile, "genotype"), start=c(1,1), count=c(100,29)))
(g <- read.gdsn(index.gdsn(genofile, "genotype"), start=c(1,1), count=c(180,29)))
gdsfmt::get.attr.gdsn(index.gdsn(genofile, "genotype"))
head(read.gdsn(index.gdsn(genofile, "snp.id")))
head(read.gdsn(index.gdsn(genofile, "snp.rs.id")))
pop <- readex.gdsn(index.gdsn(genofile, path = "sample.annot/pop.group"))
pop <- readex.gdsn(index.gdsn(genofile, path = "sample.annot/pop.group"))
(genofile <- snpgdsOpen("test.gds"))
(genofile <- snpgdsOpen("test.gds"))
newfile <- createfn.gds(2tst.gds)
newfile <- createfn.gds(test.gds)
newfile <- createfn.gds(test.gds)
library(gdsfmt)
library(SNPRelate)
>vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
SNPRelate::snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
(genofile <- snpgdsOpen("test.gds")
(genofile <- snpgdsOpen("test.gds")
get.attr.gdsn(index.gdsn(genofile, "snp.chromosome"))
get.attr.gdsn(index.gdsn(genofile, "snp.chromosome"))
snpgdsSummary("test.gds")
(genofile <- snpgdsOpen("test.gds")
genofile
(genofile <- snpgdsOpen("test.gds")
getClassDef("SNPbin")
library(adegenet)
Class "SNPbin" [package "adegenet"]
getClassDef("SNPbin")
library(adegenet)
getClassDef("SNPbin")
new("SNPbin")
x <- new("SNPbin", c(0,1,1,2,0,0,1))
x
as.integer(x)
as.integer(x)
## REAL-SIZE EXAMPLE
dat <- lapply(1:180, function(i) sample(c(0,1,NA), 6e5, prob=c(.5, .49, .01), replace=TRUE))
?read.PLINK
source('~/Desktop/Untitled.R')
source('~/Desktop/Untitled.R')
library(SNPRelate)
library(SNPRelate)
vcf.fn <-"/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsSummary("test.gds")
newfile <- createfn.gds("test.gds")
put.attr.gdsn(newfile$root, "FileFormat", "SNP_ARRAY")
library(gdsfmt)
library(SNPRelate)
vcf.fn <-"/Users/geyev15/Documents/Data_Juniperus/1er_Data_Ju_ANALIZED/outfiles/c90d5m4p4.vcf"
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsSummary("test.gds")
newfile <- createfn.gds("test.gds")
put.attr.gdsn(newfile$root, "FileFormat", "SNP_ARRAY")
?plink
adegenetWeb()
library(adegenet)
getClassDef("SNPbin")
new("SNPbin")
ploidy(x) <- 2
x <- new("SNPbin", c(0,1,1,2,0,0,1))
x
(genofile <- snpgdsOpen("test.gds")
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
library(gdsfmt)
library(SNPRelate)
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf "
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "test.gds", method = "biallelic.only")
(genofile <- snpgdsOpen("test.gds")
put.attr.gdsn(newfile$root, "FileFormat", "SNP_ARRAY")
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
vcf.fn <- "/Users/geyev15/Documents/Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf "
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
get.wd()
getwd()
file.exists(vcf.fn)
library(gdsfmt)
library(SNPRelate)
vcf.fn <- paste0(getwd(),  "/../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsSummary("../data/test.gds")
library(gdsfmt)
library(SNPRelate)
vcf.fn <- paste0(getwd(),  "/../../../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
getwd
getwd()
library(gdsfmt)
library(SNPRelate)
vcf.fn <- paste0(getwd(),  "/../../../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsSummary("../data/test.gds")
vcf.fn <- paste0(getwd(),  "/../../../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
gwtwd()
getwd()
snpgdsVCF2GDS(vcf.fn, "/Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/test.gds", method="biallelic.only", verbose = TRUE)
vcf.fn <- paste0(getwd(),  "/../../../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
snpgdsVCF2GDS(vcf.fn, "/Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsVCF2GDS(vcf.fn, "Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsVCF2GDS(vcf.fn, "Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/test.gds", method="biallelic.only", verbose = TRUE)
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
cd /Users/geyev15/Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf
cd Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf
cd /Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf
getwd()
cd Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf
cd Documents/Homeworks_and_Labworks/TESIS_VERO_2015/Vero_AnalisisTesis/data/1.1_Data_Ju_ANALIZED/outfiles
cd ~
## My script SNPRelate
## Cargar librerias
library(gdsfmt)
library(SNPRelate)
## Existen 2 formas de meter los datos, una es ingresandolos en un archivo nuevo creado y otra es a partir de datos generados por un software
## De PyRAD obtuve un output .vcf el cual debo convertir a GDS para poder usarlo en la paqueteria SNPRelate
## Crear un archivo GDS de mis datos provenientes del software pyRAD
## Ingresar datos (los datos pueden no reconocerse debido al espacio entre los datos que debe borrarse y colocarse en la ultima linea de los datos)
vcf.fn <- paste0(getwd(),  "/../../../../Data_Juniperus/1.1_Data_Ju_ANALIZED/outfiles/c90d10m4p11.vcf")
## Reformat
snpgdsVCF2GDS(vcf.fn, "../data/test.gds", method="biallelic.only", verbose = TRUE)
## Summary Imprime la información almacenada en los objetos gds
snpgdsSummary("../data/test.gds")
## Analisis de Datos, primero debo abrir el archivo ".gds" que desee usar
genofile <- snpgdsOpen("../data/test.gds")
## Analisis de datos
pca<-snpgdsPCA(genofile, num.thread=2)
## Proporcion de varianza
pc.percent <- pca$varprop*100
head(round(pc.percent, 2))
## Crear a data.frame
tab <- data.frame(sample.id = pca$sample.id, EV1 = pca$eigenvect[,1],    # the first eigenvector,
EV2 = pca$eigenvect[,2],    # the second eigenvector
stringsAsFactors = FALSE)
head(tab)
## Pruebas de plots
## Generar un vector para colocar los nombres de las muestras (de objeto de Data pasa a objeto de Value tambien) y despues ejecutar un plot
muestras <-tab$sample.id
Jb<-grep("Jb", muestras)
Jm<-grep("Jm",muestras)
Out<-grep("Out", muestras)
Neg<-grep("Neg", muestras)
plot(tab$EV2, tab$EV1, xlab="eigenvector 2", ylab="eigenvector 1",
bty = "7",
main = "Datos Juniperus d10",
text( tab$EV2, tab$EV1, muestras, cex = 0.4),
cex = 1, cex.lab = 0.7, pch = "*",
col = "white")
text( tab$EV2[Jb], tab$EV1[Jb], muestras[Jb], col = "violetred", cex = 0.5)
text( tab$EV2[Jm], tab$EV1[Jm], muestras[Jm], col = "olivedrab2", cex = 0.5)
text( tab$EV2[Out], tab$EV1[Out], muestras[Out], col = "turquoise", cex = 0.5)
text( tab$EV2[Neg], tab$EV1[Neg], muestras[Out], col = "orange3", cex = 0.5)
## Crear a pca 2 para modificar los datos sin alterar lo hecho en pca
pca2 <- pca[-c(167:179)]
## Modifico los datos de pca para poder borrar los outs y Neg y al parecer si funciono pero me faltaba modificar el valor eigenvect que tambien es afectado por sample.id
pca2$sample.id <- pca$sample.id[-c(167:179)]
## Modifico los datos de pca para poder borrar los outs y Neg y al parecer si funciono
pca2$eigenvect <- pca2$eigenvect[-c(167:179),1:32]
## Proporcion de varianza
pc.percent2 <- pca2$varprop*100
head(round(pc.percent2, 2))
## Crear a data.frame
tab2 <- data.frame(sample.id = pca2$sample.id, EV1 = pca2$eigenvect[,1],    # the first eigenvector,
EV2 = pca2$eigenvect[,2],    # the second eigenvector
stringsAsFactors = FALSE)
head(tab)
## Pruebas de plots
## Generar un vector para colocar los nombres de las muestras (de objeto de Data pasa a objeto de Value tambien) y despues ejecutar un plot
muestras2 <-tab2$sample.id
## Generar valores para las muestras para despues plotear con colores especificos, los colores vienen en una tabla elaborada por Charts.
Jb2<-grep("Jb", muestras2)
Jm2<-grep("Jm",muestras2)
Out2<-grep("Out", muestras2)
plot(tab2$EV2, tab2$EV1, xlab="eigenvector 2", ylab="eigenvector 1",
bty = "7",
main = "Datos Juniperus d10",
cex = 1, cex.lab = 0.7, pch = "*",
col = "white"
)
text( tab2$EV2[Jb2], tab2$EV1[Jb2], muestras2[Jb2], col = "violetred", cex = 0.5)
text( tab2$EV2[Jm2], tab2$EV1[Jm2], muestras2[Jm2], col = "olivedrab2", cex = 0.5)
text( tab2$EV2[Out2], tab2$EV1[Out2], muestras2[Out2], col = "turquoise", cex = 0.5)
## Para observar algún efecto de la "lane" donde se secuenciaron las muestras lo checare rapido coloreando las muestras deacuerdo a la "lane" a la que pertenecen
## Debo generar un valor que contenga las lanes
lanes <- read.csv("/Users/geyev15/Documents/Data_Juniperus/Juniperus/demultiplex_data_pyRAD/DataJu_barcodes/muestras_lane.csv", header=T )
## tengo que hacer un data.frame con sample.id y lane
tab3 <- data.frame(lanes)
## Generar el plot
plot(tab2$EV2, tab2$EV1, xlab="eigenvector 2", ylab="eigenvector 1",
bty = "7",
main = "Datos Juniperus d10",
cex = 1, cex.lab = 0.7, pch = "*",
col = tab3$lane
)
# Usando la funcion match () encontrará los datos de el primero en el segundo argumento puesto
# Creará una columna de la tabla 3 en la tabla 2 y los organizará de acuerdo a la sample.id en comun en ambas tablas
tab2$lane=tab3$lane[match(tab2$sample.id, tab3$sample.id)]
# Generar un plot con las lane organizadas, diferenciadas por distinto color en los asteriscos
plot(tab2$EV2, tab2$EV1, xlab="eigenvector 2", ylab="eigenvector 1",
bty = "7",
main = "Datos Juniperus d10",
cex = 1, cex.lab = 0.7, pch = "*",
col = tab2$lane
)
# Generar plot con el nombre de la muestra y mismo color por lane
# Colocar muestras que pertenecen a la misma lane en un valor ("Ju*"), para despues plotear y agregar nombres.
Ju01<-grep("Ju01", tab2$lane )
Ju02<-grep("Ju02", tab2$lane )
Ju03<-grep("Ju03", tab2$lane )
Ju04<-grep("Ju04", tab2$lane )
Ju05<-grep("Ju05", tab2$lane )
Ju06<-grep("Ju06", tab2$lane )
Ju07<-grep("Ju07", tab2$lane )
Ju08<-grep("Ju08", tab2$lane )
Ju09<-grep("Ju09", tab2$lane )
Ju10<-grep("Ju10", tab2$lane )
plot(tab2$EV2, tab2$EV1, xlab="eigenvector 2", ylab="eigenvector 1",
bty = "7",
main = "Datos Juniperus d10",
cex = 1, cex.lab = 0.7, pch = "*",
col = "white"
)
text( tab2$EV2[Ju01], tab2$EV1[Ju01], muestras2[Ju01], col = "hotpink", cex = 0.5)
text( tab2$EV2[Ju02], tab2$EV1[Ju02], muestras2[Ju02], col = "olivedrab3", cex = 0.5)
text( tab2$EV2[Ju03], tab2$EV1[Ju03], muestras2[Ju03], col = "cyan3", cex = 0.5)
text( tab2$EV2[Ju04], tab2$EV1[Ju04], muestras2[Ju04], col = "blue", cex = 0.5)
text( tab2$EV2[Ju05], tab2$EV1[Ju05], muestras2[Ju05], col = "purple", cex = 0.5)
text( tab2$EV2[Ju06], tab2$EV1[Ju06], muestras2[Ju06], col = "darkorange", cex = 0.5)
text( tab2$EV2[Ju07], tab2$EV1[Ju07], muestras2[Ju07], col = "red", cex = 0.5)
text( tab2$EV2[Ju08], tab2$EV1[Ju08], muestras2[Ju08], col = "plum", cex = 0.5)
text( tab2$EV2[Ju09], tab2$EV1[Ju09], muestras2[Ju09], col = "darkgreen", cex = 0.5)
text( tab2$EV2[Ju10], tab2$EV1[Ju10], muestras2[Ju10], col = "gold", cex = 0.5)
mapdata
maps
getwd()
library(maps)
library(maptools)
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd ~
cd Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
getwd()
ls
ls()
cd Documents
cd /Documents
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd ~
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
getwd()
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
getwd()
cd /Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R
cd ..
setwd
?setwd
setwd(/Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R)
setwd(~/Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R)
getwd()
setwd("~/Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R")
getwd()
library(maps)
library(maptools)
rbiogeo<-readShapePoly("rbiog4mcw_p1") #Archivo CONABIO
rbiogeo<-readShapePoly("/rbiog4mcw_p1") #Archivo CONABIO
setwd("~/Documents/Homeworks_and_Labworks/Bitacora/SEPTIEMBRE/Mapas_con_R/rbiog4mcw_p1") #Direccion completa del wd
Los datos referentes a los mapas de las regiones biogeograficas y los puntos de muestreo se trabajaron en la siguiente dirección.
setwd("~/Users/geyev15/Copy/Respaldo_Copy/Mapas_coordenadas_temp_pp_clima/Regiones_biogeo/rbiog4mgw_p1") #Direccion completa para cambiar el wd
getwd() #Confirmar el wd
#Se usarón las siguientes paqueterias
library(maps)
library(maptools)
#Cargar archivos del Geoportal de CONABIO (http://www.conabio.gob.mx/informacion/gis/)
rbiogeo<-readShapePoly("rbiog4mgw") #Archivo CONABIO ".shp"
#Plotear regiones biogeograficas
plot(rbiogeo, ) #Solo plotea las regiones b.
setwd("~/Users/geyev15/Copy/Respaldo_Copy/Mapas_coordenadas_temp_pp_clima/Regiones_biogeo/rbiog4mgw_p1") #Direccion completa para cambiar el wd
setwd("~/Copy/Respaldo_Copy/Mapas_coordenadas_temp_pp_clima/Regiones_biogeo/rbiog4mgw_p1") #Direccion completa para cambiar el wd
getwd() #Confirmar el wd
#Se usarón las siguientes paqueterias
library(maps)
library(maptools)
#Cargar archivos del Geoportal de CONABIO (http://www.conabio.gob.mx/informacion/gis/)
rbiogeo<-readShapePoly("rbiog4mgw") #Archivo CONABIO ".shp"
#Plotear regiones biogeograficas
plot(rbiogeo, ) #Solo plotea las regiones b.
levels(rbiogeo$PROVINCIA) #Enlista las regiones biogeograficas
mycols<-c(rep("white", 7), "mediumpurple1", rep("white", 5), "gold", "darkolivegreen1", rep("white", 4)) #Elijo el color de cada region
palette(mycols)
palette() #Me muestra el patron del coloreado
plot(rbiogeo, col=rbiogeo$PROVINCIA)
#Agregar puntos de coordenadas
caracteristicas<-read.delim("../Coordenadas_ju_myb") #Caracteristicas de poblaciones de Juniperus
caracteristicas$ID #Checar algun dato de la tabla(ID,Longitud, Latitud, etc)
palette(c("deeppink3", "navy"))
points(caracteristicas$Longitud, caracteristicas$Latitud, pch=c(rep(17,13), rep(19, 8)), col=caracteristicas$Habitat)
caracteristicas$Montaña
caracteristicas$Habitat
caracteristicas$Especie
